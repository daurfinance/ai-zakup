import { PrismaService } from '../prisma/prisma.service';
import { CompaniesService } from '../companies/companies.service';
import { CreateLotDto, UpdateLotDto, LotFilterDto, PublishLotDto } from './dto/lot.dto';
export declare class LotsService {
    private prisma;
    private companiesService;
    constructor(prisma: PrismaService, companiesService: CompaniesService);
    create(userId: string, createLotDto: CreateLotDto): Promise<{
        customer: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            type: string;
            address: string;
            bankReqs: import("@prisma/client/runtime/library").JsonValue;
            licenses: import("@prisma/client/runtime/library").JsonValue;
            rating: number;
            blacklistFlag: boolean;
            verifiedStatus: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    private validateTenderData;
    private generateTenderNumber;
    findAll(filters: LotFilterDto): Promise<{
        lots: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: string;
            type: string;
            lots: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            tenderNumber: string | null;
            method: string;
            title: string;
            budget: number;
            currency: string;
            region: string;
            publishedAt: Date | null;
            deadlines: import("@prisma/client/runtime/library").JsonValue;
            criteria: import("@prisma/client/runtime/library").JsonValue;
            docs: import("@prisma/client/runtime/library").JsonValue;
            contactInfo: import("@prisma/client/runtime/library").JsonValue;
            deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
            paymentTerms: import("@prisma/client/runtime/library").JsonValue;
            cancellationReason: string | null;
            cancelledAt: Date | null;
            customerCompanyId: string;
        }[];
        total: number;
        hasMore: boolean;
        page: number;
        totalPages: number;
    }>;
    findOne(id: string, userId?: string): Promise<{
        daysUntilDeadline: number;
        isActive: boolean;
        canSubmitBid: boolean;
        statistics: {
            totalBids: any;
            activeBids: any;
            averageBidPrice: number;
            minBidPrice: number;
            maxBidPrice: number;
        };
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    publish(userId: string, id: string, publishData: PublishLotDto): Promise<{
        escrowAccount: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: string;
            customerCompanyId: string;
            lotId: string;
            bankId: string;
            balance: number;
            heldPercent: number;
            fee1pctApplied: boolean;
        };
        customer: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            type: string;
            address: string;
            bankReqs: import("@prisma/client/runtime/library").JsonValue;
            licenses: import("@prisma/client/runtime/library").JsonValue;
            rating: number;
            blacklistFlag: boolean;
            verifiedStatus: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    private validateTenderForPublication;
    private createEscrowAccount;
    private notifyInterestedSuppliers;
    private calculateDaysUntilDeadline;
    private isTenderActive;
    private canSubmitBid;
    private calculateAverageBidPrice;
    private calculateMinBidPrice;
    private calculateMaxBidPrice;
    private logTenderAction;
    findByCompany(userId: string, status?: string): Promise<({
        escrowAccount: {
            status: string;
            balance: number;
        };
        _count: {
            bids: number;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    })[]>;
    update(userId: string, id: string, updateLotDto: UpdateLotDto): Promise<{
        customer: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            type: string;
            address: string;
            bankReqs: import("@prisma/client/runtime/library").JsonValue;
            licenses: import("@prisma/client/runtime/library").JsonValue;
            rating: number;
            blacklistFlag: boolean;
            verifiedStatus: string;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    cancel(userId: string, id: string, reason: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    private notifyTenderCancellation;
    close(userId: string, id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string;
        type: string;
        lots: import("@prisma/client/runtime/library").JsonValue;
        description: string;
        tenderNumber: string | null;
        method: string;
        title: string;
        budget: number;
        currency: string;
        region: string;
        publishedAt: Date | null;
        deadlines: import("@prisma/client/runtime/library").JsonValue;
        criteria: import("@prisma/client/runtime/library").JsonValue;
        docs: import("@prisma/client/runtime/library").JsonValue;
        contactInfo: import("@prisma/client/runtime/library").JsonValue;
        deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
        paymentTerms: import("@prisma/client/runtime/library").JsonValue;
        cancellationReason: string | null;
        cancelledAt: Date | null;
        customerCompanyId: string;
    }>;
    selectWinner(id: string): Promise<{
        lot: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            status: string;
            type: string;
            lots: import("@prisma/client/runtime/library").JsonValue;
            description: string;
            tenderNumber: string | null;
            method: string;
            title: string;
            budget: number;
            currency: string;
            region: string;
            publishedAt: Date | null;
            deadlines: import("@prisma/client/runtime/library").JsonValue;
            criteria: import("@prisma/client/runtime/library").JsonValue;
            docs: import("@prisma/client/runtime/library").JsonValue;
            contactInfo: import("@prisma/client/runtime/library").JsonValue;
            deliveryTerms: import("@prisma/client/runtime/library").JsonValue;
            paymentTerms: import("@prisma/client/runtime/library").JsonValue;
            cancellationReason: string | null;
            cancelledAt: Date | null;
            customerCompanyId: string;
        };
        winnerBid: any;
        message: string;
    }>;
}
